@page "/Workshops"
@inject IWebHostEnvironment Env
@rendermode InteractiveServer

<h3 class="text-4xl font-extrabold text-blue-700 mb-10 text-center" style="margin-top: 0;">Workshops</h3>

<div class="max-w-7xl mx-auto px-6">
    <!-- Workshop Karten Flex Container -->
    <div class="workshop-container">
        @foreach (var w in WorkshopList.Where(w => w.IsAvailable))
        {
            <div class="workshop-card">
                <img src="@w.Image" alt="@w.Title" class="workshop-image" />
                <h4>@w.Title</h4>
                <p>@w.Description</p>
                <p class="date">Termin: @w.Date.ToString("dd.MM.yyyy")</p>
            </div>
        }
    </div>

 
    <!-- Buchungsformular -->
    <div class="booking-form">
        <h4>Workshop buchen</h4>

        <div class="input-group">
            <label for="name">Name</label>
            <input id="name" type="text" @bind="UserName" placeholder="Dein Name" />
        </div>

        <div class="input-group">
            <label for="klasse">Klasse</label>
            <input id="klasse" type="text" @bind="UserClass" placeholder="z.B. 9c" />
        </div>

        <div class="input-group">
            <label for="classcode">Klasse-Code</label>
            <input id="classcode" type="password" @bind="ClassCode" placeholder="Dein Klassen-Code" />
        </div>

        <div class="input-group">
            <label for="workshopselect">Workshop auswählen</label>
            <select id="workshopselect" @bind="SelectedWorkshop">
                <option value="">-- Bitte wählen --</option>
                @foreach (var w in WorkshopList.Where(w => w.IsAvailable))
                {
                    <option value="@w.Title">@w.Title</option>
                }
            </select>
        </div>

        <button @onclick="BookWorkshop">Workshop buchen</button>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="error-message">@ErrorMessage</p>
        }
        else if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <p class="success-message">@SuccessMessage</p>
        }
    </div>
</div>

@code {
    private class WorkshopModel
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Image { get; set; } = "";
        public bool IsAvailable { get; set; } = true;
        public DateTime Date { get; set; } = DateTime.Today;
    }

    private List<WorkshopModel> WorkshopList = new()
    {
        new WorkshopModel {
            Title = "Davinci",
            Description = "Lerne professionelle Videobearbeitung mit DaVinci Resolve – von Cut bis Color Grading.",
            Image = "images/davinci.gif"
        },
        new WorkshopModel {
            Title = "VisualStudio",
            Description = "Entwickle dein erstes eigenes Projekt in C# mit Visual Studio und .NET.",
            Image = "images/visualstudio.gif"
        },
        new WorkshopModel {
            Title = "Podcast",
            Description = "Plane, produziere und veröffentliche deinen eigenen Podcast.",
            Image = "images/podcast.jpg"
        },
        new WorkshopModel {
            Title = "3DPrinter",
            Description = "Lerne, wie du 3D-Modelle erstellst und mit dem 3D-Drucker zum Leben erweckst.",
            Image = "images/3dprinter.gif"
        },
        new WorkshopModel {
            Title = "Bildbearbeitung",
            Description = "Bearbeite Bilder professionell mit Photoshop oder GIMP.",
            Image = "images/bildbearbeitung.gif"
        }
    };

    private string UserName = "";
    private string UserClass = "";
    private string ClassCode = "";
    private string SelectedWorkshop = "";
    private string? ErrorMessage;
    private string? SuccessMessage;

    private Dictionary<string, string> Klassencodes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadKlassencodes();
        await LoadWorkshopStatus();
    }

    private async Task LoadKlassencodes()
    {
        var klassencodesPath = Path.Combine(Env.ContentRootPath, "Data", "klassencodes.txt");
        Klassencodes.Clear();
        if (File.Exists(klassencodesPath))
        {
            var lines = await File.ReadAllLinesAsync(klassencodesPath);
            foreach (var line in lines)
            {
                var parts = line.Split('=', 2);
                if (parts.Length == 2)
                    Klassencodes[parts[0].Trim()] = parts[1].Trim();
            }
        }
    }

    private async Task LoadWorkshopStatus()
    {
        var statusPath = Path.Combine(Env.ContentRootPath, "Data", "workshopstatus.txt");
        if (!File.Exists(statusPath))
        {
            foreach (var w in WorkshopList)
            {
                w.IsAvailable = true;
                w.Date = DateTime.Today;
            }
            return;
        }

        var statusLines = await File.ReadAllLinesAsync(statusPath);
        var statusDict = new Dictionary<string, (bool IsAvailable, DateTime Date)>(StringComparer.OrdinalIgnoreCase);

        foreach (var line in statusLines)
        {
            var parts = line.Split('=', 2);
            if (parts.Length != 2) continue;

            var key = parts[0].Trim();
            var vals = parts[1].Split(';', 2, StringSplitOptions.RemoveEmptyEntries);
            if (vals.Length == 0) continue;

            bool isAvailable = vals[0].Trim().ToLowerInvariant() == "true";

            DateTime date = DateTime.Today;
            if (vals.Length > 1 && DateTime.TryParse(vals[1].Trim(), out var parsedDate))
                date = parsedDate;

            statusDict[key] = (isAvailable, date);
        }

        foreach (var w in WorkshopList)
        {
            if (statusDict.TryGetValue(w.Title, out var val))
            {
                w.IsAvailable = val.IsAvailable;
                w.Date = val.Date;
            }
            else
            {
                w.IsAvailable = true;
                w.Date = DateTime.Today;
            }
        }
    }

    private async Task BookWorkshop()
    {
        ErrorMessage = null;
        SuccessMessage = null;

        if (string.IsNullOrWhiteSpace(UserName)
            || string.IsNullOrWhiteSpace(UserClass)
            || string.IsNullOrWhiteSpace(ClassCode)
            || string.IsNullOrWhiteSpace(SelectedWorkshop))
        {
            ErrorMessage = "Bitte alle Felder ausfüllen.";
            return;
        }

        if (!Klassencodes.TryGetValue(UserClass, out var expectedCode) || expectedCode != ClassCode)
        {
            ErrorMessage = "Klasse oder Code ist falsch.";
            return;
        }

        await LoadWorkshopStatus();

        var workshop = WorkshopList.FirstOrDefault(w => w.Title == SelectedWorkshop);
        if (workshop == null)
        {
            ErrorMessage = "Ausgewählter Workshop existiert nicht.";
            return;
        }

        if (!workshop.IsAvailable)
        {
            ErrorMessage = $"Der Workshop \"{workshop.Title}\" ist aktuell nicht verfügbar.";
            return;
        }

        var filePath = Path.Combine(Env.ContentRootPath, "Data", "workshops.txt");
        if (File.Exists(filePath))
        {
            var bookings = await File.ReadAllLinesAsync(filePath);
            var normalizedName = UserName.Trim().ToLowerInvariant();
            var normalizedClass = UserClass.Trim().ToLowerInvariant();
            var normalizedWorkshop = SelectedWorkshop.Trim().ToLowerInvariant();

            bool alreadyBooked = bookings.Any(line =>
                line.StartsWith("W:") &&
                line.ToLowerInvariant().Contains(normalizedName) &&
                line.ToLowerInvariant().Contains(normalizedClass) &&
                line.ToLowerInvariant().Contains(normalizedWorkshop)
            );

            if (alreadyBooked)
            {
                ErrorMessage = "Du hast diesen Workshop bereits gebucht.";
                return;
            }
        }

        var bookingLine = $"W:{DateTime.Now:yyyy-MM-dd HH:mm} - {UserName} ({UserClass}) → {SelectedWorkshop} | Termin: {workshop.Date:dd.MM.yyyy}";

        try
        {
            if (!Directory.Exists(Path.GetDirectoryName(filePath)!))
                Directory.CreateDirectory(Path.GetDirectoryName(filePath)!);

            await File.AppendAllTextAsync(filePath, bookingLine + Environment.NewLine);

            SuccessMessage = "Workshop erfolgreich gebucht!";

            UserName = "";
            UserClass = "";
            ClassCode = "";
            SelectedWorkshop = "";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Fehler bei der Buchung: {ex.Message}";
        }
    }
}

<style>
    .workshop-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        margin-bottom: 3.5rem;
    }

    .workshop-card {
        width: 320px;
        background: white;
        border: 4px solid #2563eb; /* blau-600 */
        border-radius: 12px;
        box-shadow: 0 10px 20px rgba(0,0,0,0.05);
        padding: 1.25rem;
        display: flex;
        flex-direction: column;
        transition: background-color 0.3s ease;
        cursor: pointer;
    }

        .workshop-card:hover {
            background-color: #eff6ff; /* blau-50 */
        }

    .workshop-image {
        width: 100%;
        height: 220px;
        object-fit: cover;
        border-radius: 12px 12px 0 0;
        margin-bottom: 0.5rem;
    }

    .workshop-card h4 {
        color: #1e40af; /* blau-900 */
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0 0 0.25rem 0;
    }

    .workshop-card p {
        color: #374151; /* grau-700 */
        font-size: 0.875rem;
        flex-grow: 1;
        margin: 0 0 0.5rem 0;
    }

    .workshop-card .date {
        color: #2563eb; /* blau-600 */
        font-weight: 600;
        font-size: 0.875rem;
        margin-top: auto;
    }

    .booking-form {
        background: white;
        max-width: 440px;
        margin: 0 auto 3rem auto;
        border-radius: 1.5rem;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        border: 1px solid #93c5fd; /* blau-300 */
        padding: 2rem;
    }

        .booking-form h4 {
            text-align: center;
            font-size: 1.5rem;
            font-weight: 700;
            color: #2563eb; /* blau-600 */
            margin-bottom: 1.75rem;
        }

    .input-group {
        margin-bottom: 0.75rem;
    }

    label {
        display: block;
        font-weight: 600;
        color: #1e40af; /* blau-900 */
        margin-bottom: 0.25rem;
        font-size: 0.95rem;
    }

    input[type="text"],
    input[type="password"],
    select {
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 0.95rem;
        font-weight: 500;
        color: #1e40af; /* blau-900 */
        border: 2px solid #3b82f6; /* blau-500 */
        border-radius: 0.625rem;
        box-sizing: border-box;
        transition: border-color 0.25s ease;
    }

        input[type="text"]:focus,
        input[type="password"]:focus,
        select:focus {
            outline: none;
            border-color: #0d6efd; /* blau-700 */
            box-shadow: 0 0 8px rgba(13,110,253,0.5);
        }

    button {
        width: 100%;
        padding: 0.75rem;
        background-color: #0d6efd; /* blau-700 */
        color: white;
        font-weight: 600;
        font-size: 1rem;
        border: none;
        border-radius: 1rem;
        cursor: pointer;
        margin-top: 1rem;
        transition: background-color 0.3s ease;
    }

        button:hover {
            background-color: #0b5ed7;
        }

    .error-message {
        color: #dc3545;
        font-weight: 600;
        margin-top: 1rem;
        text-align: center;
    }

    .success-message {
        color: #198754;
        font-weight: 600;
        margin-top: 1rem;
        text-align: center;
    }
</style>
