@page "/Workshops"
@inject IWebHostEnvironment Env
@inject GitHubUploader GitHubUploader
@rendermode InteractiveServer

<h3 class="text-4xl font-extrabold text-blue-700 mb-10 text-center" style="margin-top:0;">Workshops</h3>

<div class="max-w-7xl mx-auto px-6">
    <!-- Workshop Karten -->
    <div class="workshop-container">
        @foreach (var w in WorkshopList.Where(w => w.IsAvailable && w.Date.Date >= DateTime.Today))
        {
            <div class="workshop-card">
                <img src="@w.Image" alt="@w.Title" class="workshop-image" />
                <h4>@w.Title</h4>
                <p>@w.Description</p>
                <p class="date">Termin: @w.Date.ToString("dd.MM.yyyy HH:mm")</p>
                <p class="slots">@w.AvailableSlots/4 Plätze frei</p>
            </div>
        }
    </div>

    <!-- Buchungsformular -->
    <div class="booking-form">
        <h4>Workshop buchen</h4>

        <div class="input-group">
            <label for="name">Name</label>
            <input id="name" type="text" @bind="UserName" placeholder="Dein Name" />
        </div>

        <div class="input-group">
            <label for="klasse">Klasse</label>
            <input id="klasse" type="text" @bind="UserClass" placeholder="z.B. 9c" />
        </div>

        <div class="input-group">
            <label for="classcode">Klasse-Code</label>
            <input id="classcode" type="password" @bind="ClassCode" placeholder="Dein Klassen-Code" />
        </div>

        <div class="input-group">
            <label for="workshopselect">Workshop auswählen</label>
            <select id="workshopselect" @bind="SelectedWorkshop">
                <option value="">-- Bitte wählen --</option>
                @foreach (var w in WorkshopList.Where(w => w.IsAvailable && w.Date.Date >= DateTime.Today))
                {
                    <option value="@w.Title">@w.Title (@w.AvailableSlots/4 Plätze frei)</option>
                }
            </select>
        </div>

        <button @onclick="BookWorkshop">Workshop buchen</button>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="error-message">@ErrorMessage</p>
        }
        else if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <p class="success-message">@SuccessMessage</p>
        }
    </div>
</div>

@code {
    private class WorkshopModel
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Image { get; set; } = "";
        public bool IsAvailable { get; set; } = false;
        public DateTime Date { get; set; } = DateTime.Today;
        public int AvailableSlots { get; set; } = 4;
    }

    private List<WorkshopModel> WorkshopList = new()
    {
        new WorkshopModel { Title = "Davinci", Description = "Lerne professionelle Videobearbeitung mit DaVinci Resolve – von Cut bis Color Grading.", Image = "images/davinci.gif" },
        new WorkshopModel { Title = "VisualStudio", Description = "Entwickle dein erstes eigenes Projekt in C# mit Visual Studio und .NET.", Image = "images/visualstudio.gif" },
        new WorkshopModel { Title = "Podcast", Description = "Plane, produziere und veröffentliche deinen eigenen Podcast.", Image = "images/podcast.jpg" },
        new WorkshopModel { Title = "3DPrinter", Description = "Lerne, wie du 3D-Modelle erstellst und mit dem 3D-Drucker zum Leben erweckst.", Image = "images/3dprinter.gif" },
        new WorkshopModel { Title = "Bildbearbeitung", Description = "Bearbeite Bilder professionell mit Photoshop oder GIMP.", Image = "images/bildbearbeitung.gif" }
    };

    private string UserName = "";
    private string UserClass = "";
    private string ClassCode = "";
    private string SelectedWorkshop = "";
    private string? ErrorMessage;
    private string? SuccessMessage;

    private Dictionary<string, string> Klassencodes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadKlassencodes();
        await LoadWorkshopStatus();
        await UpdateAvailableSlots();
    }

    private async Task LoadKlassencodes()
    {
        var klassencodesPath = Path.Combine(Env.ContentRootPath, "Data", "klassencodes.txt");
        Klassencodes.Clear();
        if (File.Exists(klassencodesPath))
        {
            var lines = await File.ReadAllLinesAsync(klassencodesPath);
            foreach (var line in lines)
            {
                var parts = line.Split('=', 2);
                if (parts.Length == 2)
                    Klassencodes[parts[0].Trim()] = parts[1].Trim();
            }
        }
    }

    private async Task LoadWorkshopStatus()
    {
        var statusPath = Path.Combine(Env.ContentRootPath, "Data", "workshopstatus.txt");
        if (!File.Exists(statusPath))
        {
            foreach (var w in WorkshopList)
                w.IsAvailable = false;
            return;
        }

        var statusLines = await File.ReadAllLinesAsync(statusPath);
        var statusDict = new Dictionary<string, (bool IsAvailable, DateTime Date)>(StringComparer.OrdinalIgnoreCase);

        foreach (var line in statusLines)
        {
            var parts = line.Split('=', 2);
            if (parts.Length != 2) continue;

            var key = parts[0].Trim();
            var vals = parts[1].Split(';', StringSplitOptions.RemoveEmptyEntries);
            if (vals.Length == 0) continue;

            bool isAvailable = vals[0].Trim().ToLower() == "true";
            DateTime parsedDate = DateTime.Today;

            if (vals.Length > 1 && DateTime.TryParse(vals[1].Trim(), out var tmpDate))
            {
                parsedDate = tmpDate;
            }

            statusDict[key] = (isAvailable, parsedDate);
        }

        foreach (var w in WorkshopList)
        {
            if (statusDict.TryGetValue(w.Title, out var val))
            {
                w.IsAvailable = val.IsAvailable;
                w.Date = val.Date;
            }
        }
    }

    private async Task UpdateAvailableSlots()
    {
        var filePath = Path.Combine(Env.ContentRootPath, "Data", "workshops.txt");
        var bookings = new List<string[]>();
        if (File.Exists(filePath))
        {
            bookings = (await File.ReadAllLinesAsync(filePath))
                        .Skip(1)
                        .Select(l => l.Split(';'))
                        .Where(p => p.Length >= 5) // Name;Klasse;Workshop;Datum;Status
                        .ToList();
        }

        foreach (var w in WorkshopList)
        {
            int bookedCount = bookings.Count(b => 
                string.Equals(b[2].Trim(), w.Title, StringComparison.OrdinalIgnoreCase) &&
                string.Equals(b[4].Trim().ToLower(), "accept") &&
                DateTime.TryParse(b[3].Trim(), out var d) && d.Date == w.Date.Date
            );

            w.AvailableSlots = Math.Max(0, 4 - bookedCount);
            w.IsAvailable = w.IsAvailable && w.AvailableSlots > 0;
        }
    }

    private async Task BookWorkshop()
    {
        ErrorMessage = null;
        SuccessMessage = null;

        if (string.IsNullOrWhiteSpace(UserName)
            || string.IsNullOrWhiteSpace(UserClass)
            || string.IsNullOrWhiteSpace(ClassCode)
            || string.IsNullOrWhiteSpace(SelectedWorkshop))
        {
            ErrorMessage = "Bitte alle Felder ausfüllen.";
            return;
        }

        if (!Klassencodes.TryGetValue(UserClass, out var expectedCode) || expectedCode != ClassCode)
        {
            ErrorMessage = "Klasse oder Code ist falsch.";
            return;
        }

        await LoadWorkshopStatus();
        await UpdateAvailableSlots();

        var workshop = WorkshopList.FirstOrDefault(w => w.Title == SelectedWorkshop);
        if (workshop == null || !workshop.IsAvailable)
        {
            ErrorMessage = $"Der Workshop \"{SelectedWorkshop}\" ist aktuell nicht verfügbar.";
            return;
        }

        var filePath = Path.Combine(Env.ContentRootPath, "Data", "workshops.txt");
        if (!Directory.Exists(Path.GetDirectoryName(filePath)!))
            Directory.CreateDirectory(Path.GetDirectoryName(filePath)!);

        if (!File.Exists(filePath))
        {
            await File.WriteAllTextAsync(filePath, "Name;Klasse;Workshop;Termin;Status;Admin" + Environment.NewLine);
        }

        var existingBookings = (await File.ReadAllLinesAsync(filePath))
                                .Skip(1)
                                .Select(l => l.Split(';'))
                                .Where(parts => parts.Length >= 5)
                                .ToList();

      

        bool alreadyBooked = existingBookings.Any(b =>
         string.Equals(b[0].Trim(), UserName.Trim(), StringComparison.OrdinalIgnoreCase) &&
         string.Equals(b[2].Trim(), SelectedWorkshop.Trim(), StringComparison.OrdinalIgnoreCase) &&
         DateTime.TryParse(b[3].Trim(), out var bookedDate) &&
         bookedDate.Date == workshop.Date.Date
     
);
        if (alreadyBooked)
        {
            ErrorMessage = "Du hast diesen Workshop bereits gebucht.";
            return;
        }

        if (workshop.AvailableSlots <= 0)
        {
            ErrorMessage = "Dieser Workshop ist bereits voll (max. 4 Teilnehmer).";
            return;
        }

        var bookingLine = $"{UserName};{UserClass};{SelectedWorkshop};{workshop.Date:dd.MM.yyyy HH:mm};;";
        await File.AppendAllTextAsync(filePath, bookingLine + Environment.NewLine);

        try
        {
            bool uploadSuccess = await GitHubUploader.UploadOrUpdateFileAsync(
                path: "Data/workshops.txt",
                content: await File.ReadAllTextAsync(filePath),
                commitMessage: $"Neue Workshop-Buchung: {SelectedWorkshop} - {UserName}"
            );

            if (!uploadSuccess)
            {
                var allLines = (await File.ReadAllLinesAsync(filePath)).ToList();
                if (allLines.Count > 1) allLines.RemoveAt(allLines.Count - 1);
                await File.WriteAllLinesAsync(filePath, allLines);
                ErrorMessage = "Es ist ein Fehler aufgetreten. Die Buchung wurde zurückgesetzt.";
                return;
            }

            SuccessMessage = "Workshop erfolgreich gebucht!";
            UserName = "";
            UserClass = "";
            ClassCode = "";
            SelectedWorkshop = "";

            await UpdateAvailableSlots();
        }
        catch (Exception ex)
        {
            var allLines = (await File.ReadAllLinesAsync(filePath)).ToList();
            if (allLines.Count > 1) allLines.RemoveAt(allLines.Count - 1);
            await File.WriteAllLinesAsync(filePath, allLines);
            ErrorMessage = "Es ist ein Fehler aufgetreten. Die Buchung wurde zurückgesetzt.";
            Console.WriteLine($"Fehler: {ex.Message}");
        }
    }
}

<style>
.workshop-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 20px;
    margin-bottom: 3.5rem;
}

.workshop-card {
    width: 320px;
    background: white;
    border: 4px solid #2563eb;
    border-radius: 12px;
    box-shadow: 0 10px 20px rgba(0,0,0,0.05);
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    transition: background-color 0.3s ease;
    cursor: pointer;
}

.workshop-card:hover {
    background-color: #eff6ff;
}

.workshop-image {
    width: 100%;
    height: 220px;
    object-fit: cover;
    border-radius: 12px 12px 0 0;
    margin-bottom: 0.5rem;
}

.workshop-card h4 {
    color: #1e40af;
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 0.25rem 0;
}

.workshop-card p {
    color: #374151;
    font-size: 0.875rem;
    flex-grow: 1;
    margin: 0 0 0.5rem 0;
}

.workshop-card .date {
    color: #2563eb;
    font-weight: 600;
    font-size: 0.875rem;
}

.workshop-card .slots {
    color: #16a34a;
    font-weight: 600;
    font-size: 0.9rem;
}

.booking-form {
    background: white;
    max-width: 440px;
    margin: 0 auto 3rem auto;
    border-radius: 1.5rem;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    border: 1px solid #93c5fd;
    padding: 2rem;
}

.booking-form h4 {
    text-align: center;
    font-size: 1.5rem;
    font-weight: 700;
    color: #2563eb;
    margin-bottom: 1.75rem;
}

.input-group {
    margin-bottom: 0.75rem;
}

label {
    display: block;
    font-weight: 600;
    color: #1e40af;
    margin-bottom: 0.25rem;
    font-size: 0.95rem;
}

input[type="text"],
input[type="password"],
select {
    width: 100%;
    padding: 0.5rem 0.75rem;
    font-size: 0.95rem;
    font-weight: 500;
    color: #1e40af;
    border: 2px solid #3b82f6;
    border-radius: 0.625rem;
    box-sizing: border-box;
    transition: border-color 0.25s ease;
}

input[type="text"]:focus,
input[type="password"]:focus,
select:focus {
    outline: none;
    border-color: #0d6efd;
    box-shadow: 0 0 8px rgba(13,110,253,0.5);
}

button {
    width: 100%;
    padding: 0.75rem;
    background-color: #0d6efd;
    color: white;
    font-weight: 600;
    font-size: 1rem;
    border: none;
    border-radius: 1rem;
    cursor: pointer;
    margin-top: 1rem;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #0b5ed7;
}

.error-message {
    color: #dc3545;
    font-weight: 600;
    margin-top: 1rem;
    text-align: center;
}

.success-message {
    color: #198754;
    font-weight: 600;
    margin-top: 1rem;
    text-align: center;
}
</style>
