@page "/LoggedIn"
@using My_own_website.Services
@using System.Globalization
@inject LoginManager LoginService
@inject NavigationManager Navigation
@inject IWebHostEnvironment Env
@inject BackupService BackupService
@inject GitHubUploader GitHubUploader
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3 style="color:#1E3A8A; margin-bottom: 0.5rem;">Buchungen Übersicht</h3>
<p style="color:#1E3A8A; font-weight: 600; margin-top: 0; margin-bottom: 1.5rem;">
    Hallo, @LoginService.CurrentUsername!
</p>

<div class="mb-3">
    <select class="form-select" style="max-width:250px" @onchange="OnKategorieChanged" value="@SelectedKategorie">
        <option value="raum">Maker Space Buchungen</option>
        <option value="workshop">Workshop Buchungen</option>
    </select>
</div>

<div class="mb-3">
    <input type="text" class="form-control" placeholder="Suche nach Name..." @bind="SearchTerm" @onkeydown="OnEnterSearch" style="max-width:300px;">
</div>

<button class="btn btn-secondary mb-3" @onclick="Logout">Logout</button>

@if (filteredBuchungen == null)
{
    <p>Lade Buchungen...</p>
}
else if (filteredBuchungen.Count == 0)
{
    <p>Keine Buchungen gefunden.</p>
}
else
{
    <table class="table table-striped table-bordered" style="max-width:1000px; color:#0D47A1;">
        <thead style="background-color:#E3F2FD;">
            <tr>
                @if (SelectedKategorie == "raum")
                {
                    <th>🗓️ Datum</th>
                    <th>⏰ Uhrzeit</th>
                    <th>🏫 Klasse</th>
                    <th>👤 Schüler</th>
                    <th>🔑 Code</th>
                    <th>✅ Status</th>
                    <th>🛠️ Aktion</th>
                    <th>✍️ Bearbeitet von</th>
                }
                else
                {
                    <th>👤 Name</th>
                    <th>🏫 Klasse</th>
                    <th>🎯 Workshop</th>
                    <th>🗓️ Datum</th>
                    <th>⏰ Uhrzeit</th>
                    <th>✅ Status</th>
                    <th>🛠️ Aktion</th>
                    <th>✍️ Bearbeitet von</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var b in filteredBuchungen)
            {
                <tr>
                    @if (SelectedKategorie == "raum")
                    {
                        <td>@b.Datum</td>
                        <td>@b.Uhrzeit</td>
                        <td>@b.Klasse</td>
                        <td>@b.Schueler</td>
                        <td>@b.Code</td>
                        <td>
                            @if (b.Status == "accept")
                            {
                                <span style="color:green; font-weight:bold;">@b.Status</span>
                            }
                            else if (b.Status == "nicht gekommen")
                            {
                                <span style="color:red; font-weight:bold;">@b.Status</span>
                            }
                            else
                            {
                                <span style="color:#0D47A1;">Offen</span>
                            }
                        </td>
                        <td>
                            @if (b.Status != "accept")
                            {
                                <button class="btn btn-primary btn-sm" @onclick="() => MarkAcceptAsync(b)">Kommen</button>
                                <button class="btn btn-danger btn-sm ms-2" @onclick="() => MarkNotComeAsync(b)">Nicht gekommen</button>
                            }
                            else
                            {
                                <em>Abgehakt</em>
                            }
                        </td>
                        <td>@b.BearbeitetVon</td>
                    }
                    else
                    {
                        <td>@b.Schueler</td>
                        <td>@b.Klasse</td>
                        <td>@b.Code</td>
                        <td>@b.Datum</td>
                        <td>@b.Uhrzeit</td>
                        <td>
                            @if (b.Status == "accept")
                            {
                                <span style="color:green; font-weight:bold;">@b.Status</span>
                            }
                            else if (b.Status == "nicht gekommen")
                            {
                                <span style="color:red; font-weight:bold;">@b.Status</span>
                            }
                            else
                            {
                                <span style="color:#0D47A1;">Offen</span>
                            }
                        </td>
                        <td>
                            @if (b.Status != "accept")
                            {
                                <button class="btn btn-primary btn-sm" @onclick="() => MarkAcceptAsync(b)">Kommen</button>
                                <button class="btn btn-danger btn-sm ms-2" @onclick="() => MarkNotComeAsync(b)">Nicht gekommen</button>
                            }
                            else
                            {
                                <em>Abgehakt</em>
                            }
                        </td>
                        <td>@b.BearbeitetVon</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    class Buchung
    {
        public string Datum { get; set; } = "";
        public string Uhrzeit { get; set; } = "";
        public string Klasse { get; set; } = "";
        public string Schueler { get; set; } = "";
        public string Code { get; set; } = "";
        public string Status { get; set; } = "offen";
        public string BearbeitetVon { get; set; } = "";
    }

    List<Buchung> buchungen = new();
    List<Buchung> filteredBuchungen = new();
    string SelectedKategorie = "raum";
    string SearchTerm = "";
    string RaumPath => Path.Combine(Env.ContentRootPath, "Data", "buchungen.txt");
    string WorkshopPath => Path.Combine(Env.ContentRootPath, "Data", "workshops.txt");
    private bool jsInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        if (!LoginService.IsLoggedIn)
        {
            Navigation.NavigateTo("/");
            return;
        }

        LoadBuchungen();
        FilterBuchungen();
        Navigation.LocationChanged += (_, __) => Logout();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !jsInitialized)
        {
            jsInitialized = true;
            await JS.InvokeVoidAsync("window.addEventListener", "beforeunload", DotNetObjectReference.Create(this), "LogoutJS");
        }
    }

    [JSInvokable]
    public void LogoutJS()
    {
        Logout();
    }

    void OnKategorieChanged(ChangeEventArgs e)
    {
        SelectedKategorie = e.Value?.ToString() ?? "raum";
        LoadBuchungen();
        FilterBuchungen();
    }

    void LoadBuchungen()
    {
        buchungen = new List<Buchung>();
        string path = SelectedKategorie == "raum" ? RaumPath : WorkshopPath;
        if (!File.Exists(path)) return;

        var lines = File.ReadAllLines(path);

        foreach (var line in lines.Reverse())
        {
            if (string.IsNullOrWhiteSpace(line)) continue;
            var parts = line.Split(';');

            if (SelectedKategorie == "raum")
            {
                if (parts.Length < 5) continue;
                string status = parts.Length > 5 && !string.IsNullOrWhiteSpace(parts[5]) ? parts[5].Trim() : "offen";
                buchungen.Add(new Buchung
                    {
                        Datum = parts[0].Trim(),
                        Uhrzeit = parts[1].Trim(),
                        Klasse = parts[2].Trim(),
                        Schueler = parts[3].Trim(),
                        Code = parts[4].Trim(),
                        Status = status,
                        BearbeitetVon = parts.Length > 6 ? parts[6].Trim() : ""
                    });
            }
            else
            {
                if (parts.Length < 5) continue;
                string datum = "";
                string uhrzeit = "";
                if (!string.IsNullOrWhiteSpace(parts[3]))
                {
                    var dtParts = parts[3].Trim().Split(' ');
                    datum = dtParts.Length > 0 ? dtParts[0] : "";
                    uhrzeit = dtParts.Length > 1 ? dtParts[1] : "00:00";
                }

                string status = !string.IsNullOrWhiteSpace(parts[4]) ? parts[4].Trim() : "offen";
                string bearbeitetVon = parts.Length > 5 ? parts[5].Trim() : "";

                buchungen.Add(new Buchung
                    {
                        Schueler = parts[0].Trim(),
                        Klasse = parts[1].Trim(),
                        Code = parts[2].Trim(),
                        Datum = datum,
                        Uhrzeit = uhrzeit,
                        Status = status,
                        BearbeitetVon = bearbeitetVon
                    });
            }
        }

        FilterBuchungen();
    }

    void FilterBuchungen()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
            filteredBuchungen = buchungen;
        else
            filteredBuchungen = buchungen
                .Where(b => b.Schueler.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)
                         || b.Klasse.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)
                         || b.Code.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
    }

    void SaveBuchungen()
    {
        string path = SelectedKategorie == "raum" ? RaumPath : WorkshopPath;

        var lines = SelectedKategorie == "raum"
            ? buchungen.Select(b => $"{b.Datum};{b.Uhrzeit};{b.Klasse};{b.Schueler};{b.Code};{b.Status};{b.BearbeitetVon}")
            : buchungen.Select(b => $"{b.Schueler};{b.Klasse};{b.Code};{b.Datum} {b.Uhrzeit};{b.Status};{b.BearbeitetVon}");

        File.WriteAllLines(path, lines.Reverse());
    }

    async Task MarkAcceptAsync(Buchung b)
    {
        b.Status = "accept";
        b.BearbeitetVon = LoginService.CurrentUsername;
        SaveBuchungen();
        await BackupAndGitHubUpload();
        FilterBuchungen();
        StateHasChanged();
    }

    async Task MarkNotComeAsync(Buchung b)
    {
        b.Status = "nicht gekommen";
        b.BearbeitetVon = LoginService.CurrentUsername;
        SaveBuchungen();
        await BackupAndGitHubUpload();
        FilterBuchungen();
        StateHasChanged();
    }

    async Task BackupAndGitHubUpload()
    {
        string path = SelectedKategorie == "raum" ? RaumPath : WorkshopPath;
        await BackupService.BackupFileAsync(path, path);

        if (GitHubUploader != null)
        {
            await GitHubUploader.UploadOrUpdateFileAsync(
                path.Replace(Env.ContentRootPath + Path.DirectorySeparatorChar, ""),
                File.ReadAllText(path),
                $"{SelectedKategorie} Buchungen aktualisiert von {LoginService.CurrentUsername}"
            );
        }
    }

    void OnEnterSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilterBuchungen();
            StateHasChanged();
        }
    }

    void Logout()
    {
        if (LoginService.IsLoggedIn)
        {
            LoginService.Logout();
            Navigation.NavigateTo("/", true); // forceLoad = true → Seite komplett neu laden
        }
    }

}
