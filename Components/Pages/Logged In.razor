@page "/LoggedIn"
@using My_own_website.Services
@inject LoginManager LoginService
@inject NavigationManager Navigation
@inject IWebHostEnvironment Env
@inject BackupService BackupService
@inject GitHubUploader GitHubUploader
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3 style="color:#1E3A8A; margin-bottom: 0.5rem;">Buchungen √úbersicht</h3>
<p style="color:#1E3A8A; font-weight: 600; margin-top: 0; margin-bottom: 1.5rem;">
    Hallo, @LoginService.CurrentUsername!
</p>

<div class="mb-3">
    <select class="form-select" style="max-width:250px" @onchange="OnKategorieChanged">
        <option value="raum" selected="@(SelectedKategorie == "raum")">Maker Space Buchungen</option>
        <option value="workshop" selected="@(SelectedKategorie == "workshop")">Workshop Buchungen</option>
    </select>
</div>

<div class="mb-3">
    <input type="text" class="form-control" placeholder="Suche nach Name..."
           @bind="SearchTerm"
           @onkeydown="OnEnterSearch"
           style="max-width:300px;">
</div>

<button class="btn btn-secondary mb-3" @onclick="LogoutAsync">Logout</button>


@if (filteredBuchungen == null)
{
    <p>Lade Buchungen...</p>
}
else if (filteredBuchungen.Count == 0)
{
    <p>Keine Buchungen gefunden.</p>
}
else
{
    <table class="table table-striped table-bordered" style="max-width:1000px; color:#0D47A1;">
        <thead style="background-color:#E3F2FD;">
            <tr>
                @if (SelectedKategorie == "raum")
                {
                    <th>üóìÔ∏è Datum</th>
                    <th>‚è∞ Uhrzeit</th>
                    <th>üè´ Klasse</th>
                    <th>üë§ Sch√ºler</th>
                    <th>üîë Code</th>
                }
                else
                {
                    <th>‚è∞ Uhrzeit</th>
                    <th>üë§ Name</th>
                    <th>üè´ Klasse</th>
                    <th>üéØ Workshop</th>
                }
                <th>‚úÖ Status</th>
                <th>üõ†Ô∏è Aktion</th>
                <th>‚úçÔ∏è Bearbeitet von</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var b in filteredBuchungen)
            {
                <tr>
                    @if (SelectedKategorie == "raum")
                    {
                        <td>@b.Datum</td>
                        <td>@b.Uhrzeit</td>
                        <td>@b.Klasse</td>
                        <td>@b.Schueler</td>
                        <td>@b.Code</td>
                    }
                    else
                    {
                        <td>@b.Uhrzeit</td>
                        <td>@b.Schueler</td>
                        <td>@b.Klasse</td>
                        <td>@b.Code</td>
                    }
                    <td>
                        @if (b.Status == "accept")
                        {
                            <span style="color:green; font-weight:bold;">@b.Status</span>
                        }
                        else
                        {
                            <span style="color:#0D47A1;">Offen</span>
                        }
                    </td>
                    <td>
                        @if (b.Status != "accept")
                        {
                            <button class="btn btn-primary btn-sm" @onclick="() => MarkAcceptAsync(b)">Kommen</button>
                            <button class="btn btn-danger btn-sm ms-2" @onclick="() => MarkNotComeAsync(b)">Nicht gekommen</button>
                        }
                        else
                        {
                            <em>Abgehakt</em>
                        }
                    </td>
                    <td>@b.BearbeitetVon</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    class Buchung
    {
        public string Datum { get; set; } = "";
        public string Uhrzeit { get; set; } = "";
        public string Klasse { get; set; } = "";
        public string Schueler { get; set; } = "";
        public string Code { get; set; } = "";
        public string Status { get; set; } = "offen"; // leer = offen
        public string BearbeitetVon { get; set; } = "";
    }

    List<Buchung> buchungen = new();
    List<Buchung> filteredBuchungen = new();
    string SelectedKategorie = "raum";
    string SearchTerm = "";

    string RaumPath => Path.Combine(Env.ContentRootPath, "Data", "buchungen.txt");
    string WorkshopPath => Path.Combine(Env.ContentRootPath, "Data", "workshops.txt");

    protected override void OnInitialized()
    {
        if (!LoginService.IsLoggedIn)
        {
            Navigation.NavigateTo("/");
            return;
        }

        LoadBuchungen();
        FilterBuchungen();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Auto-Logout bei Fenster schlie√üen
            await JS.InvokeVoidAsync("window.addEventListener", "beforeunload",
                DotNetObjectReference.Create(this), "LogoutJS");

            Navigation.LocationChanged += async (s, e) => await LogoutAsync();
        }
    }

    [JSInvokable]
    public async Task LogoutJS()
    {
        await LogoutAsync();
    }

    void OnKategorieChanged(ChangeEventArgs e)
    {
        SelectedKategorie = e.Value?.ToString() ?? "raum";
        LoadBuchungen();
        FilterBuchungen();
    }

    void LoadBuchungen()
    {
        buchungen = new List<Buchung>();
        string path = SelectedKategorie == "raum" ? RaumPath : WorkshopPath;

        if (!File.Exists(path)) return;

        var lines = File.ReadAllLines(path);
        foreach (var line in lines)
        {
            if (string.IsNullOrWhiteSpace(line)) continue;
            var parts = line.Split(';');

            if (SelectedKategorie == "raum")
            {
                if (parts.Length < 5) continue;
                string status = parts.Length > 5 && !string.IsNullOrWhiteSpace(parts[5]) ? parts[5].Trim() : "offen";

                buchungen.Add(new Buchung
                    {
                        Datum = parts[0].Trim(),
                        Uhrzeit = parts[1].Trim(),
                        Klasse = parts[2].Trim(),
                        Schueler = parts[3].Trim(),
                        Code = parts[4].Trim(),
                        Status = status,
                        BearbeitetVon = parts.Length > 6 ? parts[6].Trim() : ""
                    });
            }
            else
            {
                if (parts.Length < 4) continue;
                string status = parts.Length > 4 && !string.IsNullOrWhiteSpace(parts[4]) ? parts[4].Trim() : "offen";

                buchungen.Add(new Buchung
                    {
                        Uhrzeit = parts[0].Trim(),
                        Schueler = parts[1].Trim(),
                        Klasse = parts[2].Trim(),
                        Code = parts[3].Trim(),
                        Status = status,
                        BearbeitetVon = parts.Length > 5 ? parts[5].Trim() : ""
                    });
            }
        }
        FilterBuchungen();
    }

    void FilterBuchungen()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            filteredBuchungen = buchungen;
        }
        else
        {
            filteredBuchungen = buchungen
                .Where(b =>
                    b.Schueler.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    b.Klasse.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    b.Code.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    void SaveBuchungen()
    {
        string path = SelectedKategorie == "raum" ? RaumPath : WorkshopPath;
        var lines = SelectedKategorie == "raum"
            ? buchungen.Select(b => $"{b.Datum};{b.Uhrzeit};{b.Klasse};{b.Schueler};{b.Code};{b.Status};{b.BearbeitetVon}")
            : buchungen.Select(b => $"{b.Uhrzeit};{b.Schueler};{b.Klasse};{b.Code};{b.Status};{b.BearbeitetVon}");
        File.WriteAllLines(path, lines);
    }

    async Task MarkAcceptAsync(Buchung b)
    {
        b.Status = "accept";
        b.BearbeitetVon = LoginService.CurrentUsername;
        SaveBuchungen();
        await BackupAndGitHubUpload();
        FilterBuchungen();
        StateHasChanged();
    }

    async Task MarkNotComeAsync(Buchung b)
    {
        buchungen.Remove(b);
        SaveBuchungen();
        await BackupAndGitHubUpload();
        FilterBuchungen();
        StateHasChanged();
    }

    async Task BackupAndGitHubUpload()
    {
        string path = SelectedKategorie == "raum" ? RaumPath : WorkshopPath;
        await BackupService.BackupFileAsync(path, path);
        if (GitHubUploader != null)
        {
            await GitHubUploader.UploadOrUpdateFileAsync(
                path.Replace(Env.ContentRootPath + Path.DirectorySeparatorChar, ""),
                File.ReadAllText(path),
                $"{SelectedKategorie} Buchungen aktualisiert von {LoginService.CurrentUsername}");
        }
    }

    void OnEnterSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilterBuchungen();
            StateHasChanged();
        }
    }

    async Task LogoutAsync()
    {
        LoginService.Logout();
        Navigation.NavigateTo("/");
        await Task.CompletedTask;
    }
}
